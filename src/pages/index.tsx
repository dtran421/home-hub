import { useState, useEffect, type FormEvent, type ReactNode } from "react";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { FiEdit2, FiRefreshCw } from "react-icons/fi";

import { api } from "@/utils/api";
import { useName, useUpdateName } from "@/hooks/Settings";
import { ErrorAlert } from "@/components/Alerts/ErrorAlert";
import { NavMenu } from "@/components/NavMenu";
import { useUnsplashImage } from "@/hooks/Unsplash";

const Home = () => {
  /* const { name, isLoading, isError, error } = useName();
  const updateName = useUpdateName();

  const [showEditor, toggleShowEditor] = useState(!name);
  useEffect(() => {
    toggleShowEditor(!name);
  }, [name]); */

  // const [newName, setNewName] = useState(name ?? "");
  const [time, setTime] = useState(new Date());
  useEffect(() => {
    const interval = setInterval(() => setTime(new Date()), 1000);
    return () => clearInterval(interval);
  }, []);

  const [refreshBg, toggleRefreshBg] = useState(false);
  useEffect(() => {
    if (refreshBg) {
      toggleRefreshBg(false);
    }
  }, [refreshBg]);

  /* const submitHandler = (e: FormEvent) => {
    e.preventDefault();
    // updateName.mutate(newName);
  };

  const loading = isLoading || updateName.isLoading;
  let headerText;
  if (!showEditor) {
    headerText = `Welcome home, ${name ?? "stranger"}`;
  } else if (!loading) {
    headerText = "Hello, what may I call you?";
  } */

  return (
    <BackgroundContainer refreshBg={refreshBg}>
      {/* <div className="indicator">
        {!!name && (
          <button
            className="indicator-item badge badge-secondary"
            onClick={() => toggleShowEditor(!showEditor)}
          >
            <FiEdit2 />
          </button>
        )}
        <div className="bg-neutral/30 flex flex-col items-center space-y-8 rounded-md px-8 py-6 backdrop-blur-sm">
          {loading ? (
            <span className="loading loading-bars loading-md text-accent" />
          ) : (
            <h1 className="text-center font-mono text-2xl font-bold text-gray-100">
              {headerText}
            </h1>
          )}
          {!loading && showEditor && (
            <form onSubmit={submitHandler}>
              <input
                type="text"
                placeholder="Tony Stark"
                className="input input-bordered input-primary w-full max-w-xs text-center"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
              />
              {updateName.isLoading && (
                <span className="loading loading-spinner loading-md text-accent" />
              )}
            </form>
          )}
          {!loading && name ? (
            <h2 className="text-center font-mono text-6xl font-bold text-white">
              {time.toLocaleTimeString([], {
                hour: "2-digit",
                minute: "2-digit",
              })}
            </h2>
          ) : null}
        </div>
      </div> */}
      <div className="absolute bottom-4 right-4">
        <button
          className="btn btn-circle text-accent"
          onClick={() => toggleRefreshBg(true)}
        >
          <FiRefreshCw size={20} />
        </button>
      </div>
      {/* <NavMenu /> */}
      {/* {isError && <ErrorAlert message={error} />} */}
    </BackgroundContainer>
  );
};

interface BackgroundContainerProps {
  refreshBg: boolean;
  children: ReactNode;
}

const BackgroundContainer = (props: BackgroundContainerProps) => {
  const { img, isLoading, refresh } = useUnsplashImage();

  if (props.refreshBg) {
    refresh();
  }

  return isLoading ? (
    <div className="bg-base-100 flex h-screen w-full flex-col items-center justify-center p-4">
      {props.children}
    </div>
  ) : (
    <div
      className="flex h-screen w-full flex-col items-center justify-center bg-cover bg-center p-4"
      style={{
        backgroundImage: `url(${img?.urls.full})`,
      }}
    >
      {props.children}
    </div>
  );
};

/* const Home = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p>
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
}; */

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}

export default Home;
